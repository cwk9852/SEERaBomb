%\VignetteIndexEntry{SEERaBomb Overview}
%\VignetteKeyword{SEER}
\documentclass{article}
\usepackage[margin=1.1in]{geometry}
\begin{document}
%\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE}
\title{Overview of Creating SEER Data R Binaries}
\author{Tom Radivoyevitch}
\maketitle
% \section*{Introduction}
\verb@SEERaBomb@ is for SEER and Japanese A-bomb survivor data analyses, but its  
focus is on SEER, for which it contributes speed to analyses by reducing 
file sizes to contain only items of interest.  
To obtain the data please visit the links in 
\verb@gettingData.pdf@ in the package's \verb@doc@ folder wherein use cases are also given in R scripts in the \verb@examples@ 
and \verb@papers@ directories. Of particular relevance here is the script
\verb@SEERaBomb/doc/examples/mkDataBinaries.R@. The goal of that script and this pdf  
is to help users produce useful SEER data R binaries. This is the first step to using SEERaBomb to analyze SEER data.      

% \section*{SEER Data R Binaries}
The \verb@incidence@ directory of the SEER data contains a SAS file that defines the field names, 
their starting positions, and their fixed widths. This file is used here to: 
1) present the field choices (see \verb@fieldNames.html@ and the 
output of \verb@getFields()@); and 2) given user choices, automatically determine the sequence of widths needed 
to extract the data of interest using the speedy R package LaF. 
\verb@getFields()@ has one parameter, \verb@seerHome="~/data/SEER"@, 
which should be overridden if the SEER data lives elsewhere. 
Its data.frame output and the SEER file \verb@seerdic.pdf@ in the SEER incidence directory 
must be thorougly examined to determine 
which fields will be useful. Once this is determined, the output 
and list of field choices, the default of which is 
\begin{verbatim} 
picks=c("casenum","reg","race","sex","agedx","yrbrth","seqnum",
        "modx","yrdx","histo3","ICD9","COD","surv","radiatn","chemo"),
\end{verbatim}
must then be inputted into \verb@pickFields()@. 

The output of \verb@pickFields()@ contains
not only pulled rows from the input, but also
inserted rows with widths computed to fill the gaps of no interest (see output of code below). Knowing these gap sizes enables 
fast file reading by \verb@LaF@ in \verb@mkSEER()@, which  
produces R Data binaries that can be then be accessed efficiently from an R script. 
A common mistake is to send the output of \verb@getFields()@ directly to \verb@mkSEER()@  in an attempt 
to obtain all columns. This produces an error because the output of \verb@pickFields()@  includes 
an additional column needed by \verb@mkSEER()@ (i.e. the column \verb@type@ in the code output below). 
Retaining all columns is not recommended 
as it slows daily data loading. A comparison of loading times is provided in  
\verb@SEERaBomb/doc/examples/mkDataBinaries.R@, which shows that it is best 
to start with the defaults, and if additional columns are needed, add them later, each time saving
the new larger binary generated by \verb@mkSEER()@ to a different file name.

This work was funded by U54CA149233 and is now supported by the Cleveland Clinic Foundation. 

<<mkSEER>>=
options(width=120)
library(SEERaBomb,quietly=T)
df=getFields()
(df=pickFields(df))
@
\end{document}