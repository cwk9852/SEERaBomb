%\VignetteIndexEntry{SEERaBomb Overview}
%\VignetteKeyword{SEER}
\documentclass{article}
\usepackage[margin=1.1in]{geometry}
\begin{document}
%\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE}
\title{Overview of Creating SEER Data R Binaries}
\author{Tom Radivoyevitch}
\maketitle
% \section*{Introduction}
\verb@SEERaBomb@ is for SEER and Japanese A-bomb survivor data analyses, but its  
focus is on SEER, for which it contributes speed to analyses by reducing 
file sizes to contain only items of interest.  
To obtain the data please visit the links in 
\verb@gettingData.pdf@ in the package's \verb@doc@ folder wherein use cases are also given in R scripts in the \verb@examples@ 
and \verb@papers@ directories. Of particular relevance here is the script
\verb@SEERaBomb/doc/examples/mkDataBinaries.R@. The goal of that script and this pdf  
is to help users produce R binaries of the SEER data. This is the first step to using SEERaBomb to analyze SEER data.      

% \section*{SEER Data R Binaries}
The \verb@incidence@ directory of the SEER data contains a SAS file that defines the field names, 
their starting positions, and their fixed widths. This file is used by \verb@getFields()@ to produce a dataframe
output that presents users with field choices. This output and the SEER 
documentation file \verb@seerdic.pdf@ in the SEER incidence directory 
should be thoroughly examined to identify fields of interest. 
Given user choices, the R function \verb@pickFields()@ automatically determines 
the sequence of widths needed 
to extract the data of interest using the speedy R package LaF. 
The output of \verb@pickFields()@ contains
not only rows pulled from the input, but also
inserted rows with widths computed to fill the gaps of no interest (see output of code below). Knowing these gap sizes enables 
fast file reading by \verb@LaF@ in \verb@mkSEER()@, which  
produces R binaries that can be then be accessed efficiently from an R script. 
A common mistake is to send the output of \verb@getFields()@ directly to \verb@mkSEER()@  in an attempt 
to obtain all columns. This produces an error because the output of \verb@pickFields()@  includes 
an additional column needed by \verb@mkSEER()@ (i.e. the column \verb@type@ in the code output below). 
Retaining all columns is not recommended 
as it slows daily data loading. A comparison of loading times is provided in  
\verb@SEERaBomb/doc/examples/mkDataBinaries.R@, which shows that it is best 
to start with the defaults, and if additional columns are needed, add them later, each time saving
the larger binary generated by \verb@mkSEER()@ to a database file with a different name.

In the code below the \verb@pickFields()@ argument \verb@picks@ (not shown) has the following default:
\begin{verbatim}
picks=c("casenum","reg","race","sex","agedx","yrbrth","seqnum",
        "modx","yrdx","histo3","ICD9","COD","surv","radiatn","chemo").
\end{verbatim}


<<mkSEER>>=
options(width=120)
library(SEERaBomb,quietly=T)
df=getFields()
(df=pickFields(df)) #numeric rowname => skip, else include
@
\end{document}